# Generated by Django 2.1.4 on 2019-01-13 21:44

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import taggit.managers
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('taggit', '0002_auto_20150616_2121'),
    ]

    operations = [
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=300)),
                ('body', models.TextField()),
                ('post_type', models.CharField(choices=[('question', 'Question'), ('answer', 'Answer')], max_length=20)),
                ('score', models.IntegerField(default=0)),
                ('view_count', models.IntegerField(default=0, null=True)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_edit_date', models.DateField(blank=True, null=True, verbose_name='Last Edit Date')),
                ('answer_count', models.IntegerField(default=0, null=True)),
                ('comment_count', models.IntegerField(default=0)),
                ('favorite_count', models.IntegerField(default=0)),
                ('accepted_answer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='posts.Post')),
                ('last_editor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='posts_edited', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_posts', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='posts.Post', verbose_name='Question')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'post',
                'verbose_name_plural': 'posts',
                'ordering': ('-created_on',),
            },
        ),
    ]
